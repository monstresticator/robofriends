{"version":3,"sources":["Card.js","CardList.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","id","name","nickname","motto","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","i","src_Card","key","App","src_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oIAiBeA,QAdF,SAAAC,GAAmC,IAAhCC,EAAgCD,EAAhCC,GAAIC,EAA4BF,EAA5BE,KAAMC,EAAsBH,EAAtBG,SAAUC,EAAYJ,EAAZI,MACnC,OAEMC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACZH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BT,EAA1B,YAAwCU,IAAI,WACpDN,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,GACJE,EAAAC,EAAAC,cAAA,mBAAWH,OCaTQ,EArBE,SAAAZ,GAAgB,IAAba,EAAab,EAAba,OAEnB,OACMR,EAAAC,EAAAC,cAAA,WAECM,EAAOC,IAAI,SAACC,EAAMC,GACjB,OACGX,EAAAC,EAAAC,cAACU,EAAD,CACGC,IAAKF,EACLf,GAAIY,EAAOG,GAAGf,GACdC,KAAMW,EAAOG,GAAGd,KAChBC,SAAUU,EAAOG,GAAGd,KACpBE,MAAOS,EAAOG,GAAGZ,YCfnBS,EAAS,CACnB,CACGZ,GAAI,EACJC,KAAM,YACNC,SAAU,OACVC,MAAO,wBAEV,CACGH,GAAI,EACJC,KAAM,YACNC,SAAU,SACVC,MAAO,YAEV,CACGH,GAAI,EACJC,KAAM,aACNC,SAAU,uBACVC,MAAO,gBAEV,CACGH,GAAI,EACJC,KAAM,eACNC,SAAU,QACVC,MAAO,+BAEV,CACGH,GAAI,EACJC,KAAM,aACNC,SAAU,MACVC,MAAO,qCAEV,CACGH,GAAI,EACJC,KAAM,aACNC,SAAU,MACVC,MAAO,SAEV,CACGH,GAAI,EACJC,KAAM,YACNC,SAAU,QACVC,MAAO,cC5BEe,EATH,WACX,OACGd,EAAAC,EAAAC,cAAA,WACMF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACa,EAAD,CAAUP,OAASA,MCITQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECTNC,IAASC,OACRtB,EAAAC,EAAAC,cAACqB,EAAD,MACAC,SAASC,eAAe,SDsHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.89d6934d.chunk.js","sourcesContent":["import React from 'react';\n\n// component function with destructured properties\nconst Card = ({ id, name, nickname, motto }) => {\n\treturn (\n\t// This is JSX not HTML\n       <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n          <img src={`https://robohash.org/${id}?100x100`} alt='robots' />\n          <div>\n             <h2>{name}</h2>\n             <p>{nickname}</p>\n             <p>Motto: {motto}</p>\n          </div>\n       </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\t// create a loop for the robots\n\treturn (\n       <div>\n\t      { \n\t      \trobots.map((user, i) => {\n\t\t       return (\n\t\t          <Card \n\t\t             key={i} \n\t\t             id={robots[i].id} \n\t\t             name={robots[i].name} \n\t\t             nickname={robots[i].name} \n\t\t             motto={robots[i].motto}\n\t\t          />\n\t\t        );\n\t        })\n\t      }\n\t   </div>\n\t);\n}\n\nexport default CardList;","export const robots = [\n   {\n      id: 1,\n      name: 'Momma Fry',\n      nickname: 'Babe',\n      motto: 'Don\\'t steal my stuff'\n   },\n   {\n      id: 2,\n      name: 'Dadda Fry',\n      nickname: 'Ummmm?',\n      motto: 'So tired'\n   },\n   {\n      id: 3,\n      name: 'Wriley Fry',\n      nickname: 'Cupcake (aka Turkey)',\n      motto: 'Wriley do it'\n   },\n   {\n      id: 4,\n      name: 'Nanna Fowlks',\n      nickname: 'Nanna',\n      motto: 'You know what? Get me a ...'\n   },\n   {\n      id: 5,\n      name: 'Gramma Fry',\n      nickname: 'Mom',\n      motto: 'God bless you and we love you all'\n   },\n   {\n      id: 6,\n      name: 'Grampa Fry',\n      nickname: 'Dad',\n      motto: '?????'\n   },\n   {\n      id: 7,\n      name: 'Pepeh Fry',\n      nickname: 'Poops',\n      motto: 'I\\'m a dog'\n   }\n]","import React from 'react';\nimport CardList from './CardList';\nimport { robots } from './robots';\n\nconst App = () => {\n\treturn (\n\t   <div>\n          <h1>RoboFriends</h1>\n          <CardList robots={ robots } />\n       </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// if it's not default, must be destructured\n// import { robots } from './robots';\n\nReactDOM.render (\n\t<App />, \n\tdocument.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}